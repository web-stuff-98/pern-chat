import type { GetServerSideProps } from 'next'
import Head from 'next/head'
import classes from './Blog.module.scss'
import { useEffect } from "react"
import pool from '../../../../utils/db'
import IPost from '../../../interfaces/IPost'
import { useInterface } from '../../../context/InterfaceContext'
import Image from 'next/image'
import Link from 'next/link'
import User from '../../../components/user/User'
import { useUsers } from '../../../context/UsersContext'
import IUser from '../../../interfaces/IUser'

const Blog = ({ page, full_count, page_count, max_page }: { page: IPost[], full_count: number, page_count: number, max_page: number }) => {
  const { isMobile, dispatch: iDispatch, state: iState, autoAddRemoveSearchTag } = useInterface()
  const { findUserData, cacheProfileDataForUser } = useUsers()

  useEffect(() => {
    if (!page) return
    let ids: number[] = []
    page.forEach((post: IPost) => {
      if (!ids.includes(post.owner))
        ids.push(post.owner)
    })
    ids.forEach((id: number) => cacheProfileDataForUser(id))
    iDispatch({
      ...(full_count ? { full_count } : {}),
      ...(page_count ? { page_count } : {}),
      ...(max_page ? { max_page } : {}),
    })
  }, [page])

  const renderCard = (post: IPost, userData: IUser, i: number) => {
    return (
      <>
        <article style={isMobile() ? {
          flexDirection: "column",
          justifyContent: "center",
          alignItems: "center",
          textAlign: "center",
        } : (i & 1) ? {} : {
          flexDirection: "row-reverse",
        }}
          className={classes.card}>
          <Link href={`/blog/${post.slug}`}>
            <div style={isMobile() ? {
              width: "100%", minWidth: "100%"
            } : {}}
              className={classes.imageContainer}>
              <Image blurDataURL={post.image_blur} placeholder="blur" alt={post.title} src={`https://res.cloudinary.com/dzpzb3uzn/image/upload/v1663407669/pern-chat/posts${process.env.NODE_ENV === "development" ? "/dev" : ""}/${post.id}`} layout="fill" />
            </div>
          </Link>
          <div style={isMobile() ? {
            textAlign: "center",
            alignItems: "center",
            width: "100%"
          } : (i & 1) ? {} : {
            alignItems: "flex-end",
            textAlign: "right",
          }} className={classes.text}>
            <h2 className={classes.title}>
              {post.title}
            </h2>
            {!isMobile() && <p className={classes.description}>
              {post.description}
            </p>}
            <div style={isMobile() ? { justifyContent: "center" } : (i & 1 ? { justifyContent: "flex-start" } : { justifyContent: "flex-end" })} className={classes.tags}>
              {post.tags.map((tag: string) => <span key={tag} className={iState.search_tags.includes(tag) ? classes.tagSelected : classes.tag} onClick={() => {
                autoAddRemoveSearchTag(tag)
              }}>
                {tag}
              </span>)}
            </div>
            {userData && <User noPfp={isMobile()} reverse={!isMobile() && !(i & 1)} date={new Date(Number(post.timestamp))} usersData={userData} />}
          </div>
        </article>
      </>
    )
  }

  return (
    <div className={classes.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={classes.explore}>
        {page.map((post: IPost, i: number) => <div key={post.id} className={classes.cardContainer}>{renderCard(post, findUserData(post.owner), i)}</div>)}
      </div>
    </div>
  )
}

export const getServerSideProps: GetServerSideProps = async ({ params, query }) => {
  let page = []
  const { tags: rawTags, term } = query
  let AND = ""
  let full_count = null
  let page_count = null
  let max_page = 1
  if (rawTags)
    AND = "AND tags && $2::VARCHAR[]"
  if (term)
    AND = `AND LOWER(title) LIKE '%${String(term).replaceAll("+", " ").replace(/[^\w-]+/g, '')}%'`
  const pageOffset = (Math.max(Number(params?.page) - 1, 0)) * 20
  const tags = String(rawTags).toLowerCase().split(" ").filter((tag: string) => tag !== "").map((tag: string) => tag.replace(/[^\w-]+/g, ''))
  try {
    const getPageQuery = await pool.query(`SELECT id,slug,owner,title,description,image_blur,timestamp,tags,count(*) OVER() AS full_count FROM post WHERE image_pending = FALSE ${AND} ORDER BY post.id DESC LIMIT 20 OFFSET $1;`, [
      pageOffset,
      ...(rawTags ? [
        tags
      ] : [])
    ])
    full_count = getPageQuery.rows[0].full_count
    page_count = getPageQuery.rowCount
    page = getPageQuery.rows
    max_page = Math.ceil(full_count / 20)
  } catch (e) {
    console.error(e)
  }
  return {
    props: {
      page,
      full_count,
      page_count,
      max_page,
    },
  }
}

export default Blog
